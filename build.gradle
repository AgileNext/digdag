buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

allprojects {
    group = 'io.digdag'
    version = '0.5.4'

    apply plugin: 'java'
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        jcenter()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                //groupId 'io.digdag'
                //artifactId 'digdag'
                from components.java
            }
        }
        repositories {
            maven {
                name 's3Release'
                if (project.version.endsWith('-SNAPSHOT')) {
                    url 's3://digdag-beta-release/maven-snapshot'
                }
                else {
                    url 's3://digdag-beta-release/maven'
                }
                credentials(AwsCredentials) {
                    // write at your S3 keys to ~/.gradle/gradle.properties file:
                    // digdag_beta_release_s3_access_key=ABCDEFGHIJKLMN
                    // digdag_beta_release_s3_secret_key=DEADBEEF/PUTYOURAPIKEY
                    accessKey project.hasProperty('digdag_beta_release_s3_access_key') ? digdag_beta_release_s3_access_key : ''
                    secretKey project.hasProperty('digdag_beta_release_s3_secret_key') ? digdag_beta_release_s3_secret_key : ''
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    findbugs {
        effort = 'max'
        reportLevel = 'high'
        ignoreFailures = true
        excludeFilter = file("${rootProject.projectDir}/config/findbugs-exclude.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacocoTestReport {
        // exclude classes generated by Immutables
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/Immutable*'])
            })
        }
    }

    // "./gradlew check" runs jacocoTestReport
    check.dependsOn('jacocoTestReport')

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    task testsJar(type: Jar, dependsOn: classes) {
        classifier = 'tests'
        from sourceSets.test.output
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task deps(type: DependencyReportTask) {
    }

    //artifacts {
    //    archives testsJar, sourcesJar, javadocJar
    //}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

project(':digdag-cli') {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Version': project.version,
                       'Implementation-Vendor-Id': project.group,
                       'Specification-Title': project.name,
                       'Specification-Version': project.version,
                       'Main-Class': 'io.digdag.cli.Main'
        }
        //include "${rootProject.projectDir}/COPYING"
        exclude 'io/digdag/**/*.java'
        dependencies {
            exclude(dependency("org.immutables:value"))
            exclude(dependency("org.immutables:builder"))
        }
    }

    task classpath(type: Copy, dependsOn: ['jar']) {
        File dest = file("${rootProject.projectDir}/classpath")
        doFirst { dest.deleteDir() }
        from configurations.runtime + files("${project.libsDir}/${project.name}-${project.version}.jar")
        into dest
    }

    //publishing {
    //    publications {
    //        shadowJar(MavenPublication) {
    //            artifactId 'digdag'
    //            artifact cliBuildFile
    //        }
    //    }
    //}
}

def cliBuildFile = file("pkg/digdag-${project.version}.jar")

task cli(dependsOn: ':digdag-cli:shadowJar') << {
    file('pkg').mkdirs()
    cliBuildFile.write("")
    cliBuildFile.append(file("digdag-cli/src/main/sh/selfrun.sh").readBytes())
    cliBuildFile.append(file("digdag-cli/build/libs/digdag-cli-${project.version}-all.jar").readBytes())
    cliBuildFile.setExecutable(true)
}

configurations {
    releases
    rootFiles
}

artifacts {
    releases file: cliBuildFile, name: 'digdag', type: 'text', builtBy: cli
    rootFiles file: file("digdag-cli/src/main/resources/digdag/cli/version.txt"), name: 'LATEST', type: 'text'
}

uploadReleases {
    repositories {
        if (!project.version.endsWith('-SNAPSHOT')) {
            ivy {
                name 's3PackageRelease'
                artifactPattern 's3://digdag-beta-release/releases/[artifact]-[revision].[ext]'
                ivyPattern 's3://digdag-beta-release/releases/metadata/[artifact]-[revision].[ext]'
                //credentials = project(':digdag-cli').publishing.repositories.s3Release.getCredentials(AwsCredentials)
                credentials(AwsCredentials) {
                    accessKey project.hasProperty('digdag_beta_release_s3_access_key') ? digdag_beta_release_s3_access_key : ''
                    secretKey project.hasProperty('digdag_beta_release_s3_secret_key') ? digdag_beta_release_s3_secret_key : ''
                }
            }
        }
    }
}

uploadRootFiles {
    repositories {
        if (!project.version.endsWith('-SNAPSHOT')) {
            ivy {
                name 's3RootFiles'
                artifactPattern 's3://digdag-beta-release/releases/[artifact].[ext]'
                ivyPattern 's3://digdag-beta-release/releases/metadata/[artifact].[ext]'
                //credentials = project(':digdag-cli').publishing.repositories.s3Release.getCredentials(AwsCredentials)
                credentials(AwsCredentials) {
                    accessKey project.hasProperty('digdag_beta_release_s3_access_key') ? digdag_beta_release_s3_access_key : ''
                    secretKey project.hasProperty('digdag_beta_release_s3_secret_key') ? digdag_beta_release_s3_secret_key : ''
                }
            }
        }
    }
}
uploadRootFiles.dependsOn(uploadReleases)

task classpath(dependsOn: [':digdag-cli:classpath']) << { }
clean { delete 'classpath' }

task release() {
    dependsOn subprojects.publish
    dependsOn uploadReleases
    dependsOn uploadRootFiles
    doLast {
        println("done.")
    }
}

task setVersion << {
    if (!project.hasProperty("to")) {
        throw new GradleException("Usage: ./gradlew setVersion -Pto=VERSION")
    }

    File gradle_ver = file('build.gradle')
    gradle_ver.write(gradle_ver.getText().replaceFirst("version = '(\\d+)(\\.\\d+){2}(-[\\d\\w]+)?'", "version = '${to}'"))

    List<String> docs = [
        'README.md',
        'digdag-cli/src/main/resources/digdag/cli/version.txt',
        'digdag-cli/src/main/java/io/digdag/cli/Main.java',
        'digdag-cli/src/main/java/io/digdag/cli/SelfUpdate.java',
        'digdag-docs/src/command_reference.rst',
    ]
    docs.each() { path ->
        File doc = file(path)
        doc.write(doc.getText().replaceAll("0\\.[2-8]\\.(\\d+)(-[\\d\\w]+)?", "${to}"))
    }

    file("digdag-docs/src/releases/release-${to}.rst").append("")
    "git add digdag-docs/src/releases/release-${to}.rst".execute().waitFor()

    println "add 'release/release-${to}' line to digdag-docs/src/releases.rst"
}

task releaseCheck << {
    if (!file("digdag-cli/src/main/resources/digdag/cli/version.txt").getText().contains("${project.version}")) {
        throw new GradleException("digdag-cli/src/main/resources/digdag/cli/version.txt doesn't include ${project.version}")
    }
    if (!file("digdag-docs/src/releases/release-${project.version}.rst").getText().contains("${project.version}")) {
        throw new GradleException("Release note for ${project.version} doesn't exist")
    }
    if (!file("digdag-docs/src/releases.rst").getText().contains("release-${project.version}")) {
        throw new GradleException("digdag-docs/src/releases.rst doesn't include release-${project.version}")
    }
    String date = new Date().format("yyyy-MM-dd")
    if (!file("digdag-docs/src/releases/release-${project.version}.rst").getText().contains(date)) {
        throw new GradleException("digdag-docs/src/releases/release-${project.version}.rst doesn't include today's release date")
    }
    // TODO check git-ls-files includes release-<version>.rst file
    println "Ready. Run 'release' task."
}

