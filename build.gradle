buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

allprojects {
    group = 'io.digdag'
    version = '0.1.0'

    apply plugin: 'java'
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task testsJar(type: Jar, dependsOn: classes) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives testsJar
    }

    task deps(type: DependencyReportTask) {
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

project(':digdag-core') {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Version': project.version,
                       'Implementation-Vendor-Id': project.group,
                       'Specification-Title': project.name,
                       'Specification-Version': project.version,
                       'Main-Class': 'io.digdag.cli.Main'
        }
        //append("${rootProject.projectDir}/COPYING")
    }

    task classpath(type: Copy) {
        File dest = file("${rootProject.projectDir}/classpath")
        doFirst { dest.deleteDir() }
        from configurations.runtime
        into dest
    }
}

task cli(dependsOn: ':digdag-core:shadowJar') << {
    file('pkg').mkdirs()
    File f = file("pkg/digdag-${project.version}.jar")
    f.write("")
    f.append(file("digdag-core/src/main/sh/selfrun.sh").readBytes())
    f.append(file("digdag-core/build/libs/digdag-core-${project.version}-all.jar").readBytes())
    f.setExecutable(true)
}

task classpath(dependsOn: ['build', ':digdag-core:classpath']) << { }
clean { delete 'classpath' }

task pydist(type: Exec) {
    commandLine 'python', 'setup.py', 'sdist'
}
